// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: internal/proto/grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	RewardService(ctx context.Context, in *RewardRequest, opts ...grpc.CallOption) (*RewardResponse, error)
	CartService(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	AddressutsService(ctx context.Context, in *AddressutsRequest, opts ...grpc.CallOption) (*AddressutsResponse, error)
	AddressstuService(ctx context.Context, in *AddressstuRequest, opts ...grpc.CallOption) (*AddressstuResponse, error)
	CredentialService(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) RewardService(ctx context.Context, in *RewardRequest, opts ...grpc.CallOption) (*RewardResponse, error) {
	out := new(RewardResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/RewardService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CartService(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/CartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddressutsService(ctx context.Context, in *AddressutsRequest, opts ...grpc.CallOption) (*AddressutsResponse, error) {
	out := new(AddressutsResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/AddressutsService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddressstuService(ctx context.Context, in *AddressstuRequest, opts ...grpc.CallOption) (*AddressstuResponse, error) {
	out := new(AddressstuResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/AddressstuService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CredentialService(ctx context.Context, in *CredentialRequest, opts ...grpc.CallOption) (*CredentialResponse, error) {
	out := new(CredentialResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/CredentialService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	RewardService(context.Context, *RewardRequest) (*RewardResponse, error)
	CartService(context.Context, *CartRequest) (*CartResponse, error)
	AddressutsService(context.Context, *AddressutsRequest) (*AddressutsResponse, error)
	AddressstuService(context.Context, *AddressstuRequest) (*AddressstuResponse, error)
	CredentialService(context.Context, *CredentialRequest) (*CredentialResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) RewardService(context.Context, *RewardRequest) (*RewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardService not implemented")
}
func (UnimplementedServiceServer) CartService(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CartService not implemented")
}
func (UnimplementedServiceServer) AddressutsService(context.Context, *AddressutsRequest) (*AddressutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressutsService not implemented")
}
func (UnimplementedServiceServer) AddressstuService(context.Context, *AddressstuRequest) (*AddressstuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressstuService not implemented")
}
func (UnimplementedServiceServer) CredentialService(context.Context, *CredentialRequest) (*CredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialService not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_RewardService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RewardService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/RewardService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RewardService(ctx, req.(*RewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/CartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CartService(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddressutsService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddressutsService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/AddressutsService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddressutsService(ctx, req.(*AddressutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddressstuService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressstuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddressstuService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/AddressstuService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddressstuService(ctx, req.(*AddressstuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CredentialService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CredentialService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/CredentialService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CredentialService(ctx, req.(*CredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RewardService",
			Handler:    _Service_RewardService_Handler,
		},
		{
			MethodName: "CartService",
			Handler:    _Service_CartService_Handler,
		},
		{
			MethodName: "AddressutsService",
			Handler:    _Service_AddressutsService_Handler,
		},
		{
			MethodName: "AddressstuService",
			Handler:    _Service_AddressstuService_Handler,
		},
		{
			MethodName: "CredentialService",
			Handler:    _Service_CredentialService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/grpc.proto",
}
