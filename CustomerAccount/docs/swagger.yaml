basePath: /
definitions:
  dao.Account:
    properties:
      agree:
        type: string
      confirm:
        type: string
      customer_group_id:
        type: string
      customer_id:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      reward_total:
        type: string
      telephone:
        type: string
      user_balance:
        type: string
    type: object
  dao.Account2:
    properties:
      cart:
        $ref: '#/definitions/dao.Cart'
        type: object
      customer_group_id:
        type: string
      customer_id:
        type: string
      date_added:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      reward_total:
        $ref: '#/definitions/dao.Reward'
        type: object
      telephone:
        type: string
      user_balance:
        type: string
    type: object
  dao.Cart:
    properties:
      product:
        items:
          $ref: '#/definitions/dao.Product'
        type: array
    type: object
  dao.Product:
    properties:
      id:
        type: integer
      product_id:
        type: integer
      quality:
        type: integer
    type: object
  dao.Reward:
    properties:
      customer_id:
        type: string
      description:
        type: string
      id:
        type: integer
      points:
        type: integer
    type: object
host: localhost:8050
info:
  contact:
    name: API Support
  description: This is Account CRUD service.
  license: {}
  termsOfService: demo.com
  title: Account API
  version: "1.0"
paths:
  /account/{id}:
    get:
      consumes:
      - application/json
      description: API to Get Customers-Frontstore's Customer
      parameters:
      - description: Customer Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Account2'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/string'
      summary: Customer Account Get Route
      tags:
      - Customer Account Get
    put:
      consumes:
      - application/json
      description: API to Update Customer-Frontstore's Customer
      parameters:
      - description: Customer Id
        in: path
        name: id
        required: true
        type: string
      - description: Account Update
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/%7B%7D'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Account'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/string'
      summary: Customer Account Create Route
      tags:
      - Customer Account Update
  /health:
    get:
      consumes:
      - application/json
      description: API to check Customer-Frontstore's health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/string'
      summary: Health Check Route
      tags:
      - Health
  /register:
    post:
      consumes:
      - application/json
      description: API to Create Customers-Frontstore Customer
      parameters:
      - description: Account info
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dao.Account'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dao.Account'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/string'
      summary: Account Create Route
      tags:
      - Create
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
