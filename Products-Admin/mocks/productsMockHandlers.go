// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/products-admin-service/internal/core/ports (interfaces: IProductsHandlers)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIProductsHandlers is a mock of IProductsHandlers interface.
type MockIProductsHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockIProductsHandlersMockRecorder
}

// MockIProductsHandlersMockRecorder is the mock recorder for MockIProductsHandlers.
type MockIProductsHandlersMockRecorder struct {
	mock *MockIProductsHandlers
}

// NewMockIProductsHandlers creates a new mock instance.
func NewMockIProductsHandlers(ctrl *gomock.Controller) *MockIProductsHandlers {
	mock := &MockIProductsHandlers{ctrl: ctrl}
	mock.recorder = &MockIProductsHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductsHandlers) EXPECT() *MockIProductsHandlersMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockIProductsHandlers) AddProduct(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddProduct", arg0)
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockIProductsHandlersMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockIProductsHandlers)(nil).AddProduct), arg0)
}

// DeleteProduct mocks base method.
func (m *MockIProductsHandlers) DeleteProduct(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteProduct", arg0)
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductsHandlersMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductsHandlers)(nil).DeleteProduct), arg0)
}

// GetProducts mocks base method.
func (m *MockIProductsHandlers) GetProducts(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProducts", arg0)
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductsHandlersMockRecorder) GetProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductsHandlers)(nil).GetProducts), arg0)
}

// Health mocks base method.
func (m *MockIProductsHandlers) Health(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Health", arg0)
}

// Health indicates an expected call of Health.
func (mr *MockIProductsHandlersMockRecorder) Health(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockIProductsHandlers)(nil).Health), arg0)
}

// UpdateProduct mocks base method.
func (m *MockIProductsHandlers) UpdateProduct(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateProduct", arg0)
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductsHandlersMockRecorder) UpdateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductsHandlers)(nil).UpdateProduct), arg0)
}
