// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team2/Products-Admin/internal/core/ports (interfaces: IProductsServices)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team2/Products-Admin/internal/core/domain"
	errors "github.com/swiggy-2022-bootcamp/cdp-team2/Products-Admin/pkg/errors"
)

// MockIProductsServices is a mock of IProductsServices interface.
type MockIProductsServices struct {
	ctrl     *gomock.Controller
	recorder *MockIProductsServicesMockRecorder
}

// MockIProductsServicesMockRecorder is the mock recorder for MockIProductsServices.
type MockIProductsServicesMockRecorder struct {
	mock *MockIProductsServices
}

// NewMockIProductsServices creates a new mock instance.
func NewMockIProductsServices(ctrl *gomock.Controller) *MockIProductsServices {
	mock := &MockIProductsServices{ctrl: ctrl}
	mock.recorder = &MockIProductsServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductsServices) EXPECT() *MockIProductsServicesMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockIProductsServices) AddProduct(arg0 *domain.Product) (int64, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockIProductsServicesMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockIProductsServices)(nil).AddProduct), arg0)
}

// CheckProductsWithCategory mocks base method.
func (m *MockIProductsServices) CheckProductsWithCategory(arg0 int64) (bool, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductsWithCategory", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// CheckProductsWithCategory indicates an expected call of CheckProductsWithCategory.
func (mr *MockIProductsServicesMockRecorder) CheckProductsWithCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductsWithCategory", reflect.TypeOf((*MockIProductsServices)(nil).CheckProductsWithCategory), arg0)
}

// CheckoutProducts mocks base method.
func (m *MockIProductsServices) CheckoutProducts(arg0 []*domain.ProductIDAndQnty) ([]*domain.ProductIDMsg, []*domain.ProductIDMsg, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutProducts", arg0)
	ret0, _ := ret[0].([]*domain.ProductIDMsg)
	ret1, _ := ret[1].([]*domain.ProductIDMsg)
	ret2, _ := ret[2].(*errors.AppError)
	return ret0, ret1, ret2
}

// CheckoutProducts indicates an expected call of CheckoutProducts.
func (mr *MockIProductsServicesMockRecorder) CheckoutProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutProducts", reflect.TypeOf((*MockIProductsServices)(nil).CheckoutProducts), arg0)
}

// DeleteProduct mocks base method.
func (m *MockIProductsServices) DeleteProduct(arg0 int64) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductsServicesMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductsServices)(nil).DeleteProduct), arg0)
}

// GetProductById mocks base method.
func (m *MockIProductsServices) GetProductById(arg0 int64) (*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockIProductsServicesMockRecorder) GetProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockIProductsServices)(nil).GetProductById), arg0)
}

// GetProducts mocks base method.
func (m *MockIProductsServices) GetProducts() ([]*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductsServicesMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductsServices)(nil).GetProducts))
}

// GetProductsByCategoryId mocks base method.
func (m *MockIProductsServices) GetProductsByCategoryId(arg0 int64) ([]*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategoryId", arg0)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetProductsByCategoryId indicates an expected call of GetProductsByCategoryId.
func (mr *MockIProductsServicesMockRecorder) GetProductsByCategoryId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategoryId", reflect.TypeOf((*MockIProductsServices)(nil).GetProductsByCategoryId), arg0)
}

// IsProductExists mocks base method.
func (m *MockIProductsServices) IsProductExists(arg0 int64) (bool, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProductExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// IsProductExists indicates an expected call of IsProductExists.
func (mr *MockIProductsServicesMockRecorder) IsProductExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProductExists", reflect.TypeOf((*MockIProductsServices)(nil).IsProductExists), arg0)
}

// SearchByKeyword mocks base method.
func (m *MockIProductsServices) SearchByKeyword(arg0 string) ([]*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByKeyword", arg0)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// SearchByKeyword indicates an expected call of SearchByKeyword.
func (mr *MockIProductsServicesMockRecorder) SearchByKeyword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByKeyword", reflect.TypeOf((*MockIProductsServices)(nil).SearchByKeyword), arg0)
}

// SearchByManufacturerID mocks base method.
func (m *MockIProductsServices) SearchByManufacturerID(arg0 int64) ([]*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByManufacturerID", arg0)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// SearchByManufacturerID indicates an expected call of SearchByManufacturerID.
func (mr *MockIProductsServicesMockRecorder) SearchByManufacturerID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByManufacturerID", reflect.TypeOf((*MockIProductsServices)(nil).SearchByManufacturerID), arg0)
}

// SearchByStartPrice mocks base method.
func (m *MockIProductsServices) SearchByStartPrice(arg0 string) ([]*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByStartPrice", arg0)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// SearchByStartPrice indicates an expected call of SearchByStartPrice.
func (mr *MockIProductsServicesMockRecorder) SearchByStartPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByStartPrice", reflect.TypeOf((*MockIProductsServices)(nil).SearchByStartPrice), arg0)
}

// UpdateProduct mocks base method.
func (m *MockIProductsServices) UpdateProduct(arg0 int64, arg1 *domain.Product) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductsServicesMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductsServices)(nil).UpdateProduct), arg0, arg1)
}
