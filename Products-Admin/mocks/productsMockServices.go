// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/products-admin-service/internal/core/ports (interfaces: IProductsServices)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/products-admin-service/internal/core/domain"
	errors "github.com/products-admin-service/pkg/errors"
)

// MockIProductsServices is a mock of IProductsServices interface.
type MockIProductsServices struct {
	ctrl     *gomock.Controller
	recorder *MockIProductsServicesMockRecorder
}

// MockIProductsServicesMockRecorder is the mock recorder for MockIProductsServices.
type MockIProductsServicesMockRecorder struct {
	mock *MockIProductsServices
}

// NewMockIProductsServices creates a new mock instance.
func NewMockIProductsServices(ctrl *gomock.Controller) *MockIProductsServices {
	mock := &MockIProductsServices{ctrl: ctrl}
	mock.recorder = &MockIProductsServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductsServices) EXPECT() *MockIProductsServicesMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockIProductsServices) AddProduct(arg0 *domain.Product) (int, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockIProductsServicesMockRecorder) AddProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockIProductsServices)(nil).AddProduct), arg0)
}

// DeleteProduct mocks base method.
func (m *MockIProductsServices) DeleteProduct(arg0 int) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductsServicesMockRecorder) DeleteProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductsServices)(nil).DeleteProduct), arg0)
}

// GetProducts mocks base method.
func (m *MockIProductsServices) GetProducts() ([]*domain.Product, *errors.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts")
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(*errors.AppError)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockIProductsServicesMockRecorder) GetProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockIProductsServices)(nil).GetProducts))
}

// UpdateProduct mocks base method.
func (m *MockIProductsServices) UpdateProduct(arg0 int, arg1 *domain.Product) *errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(*errors.AppError)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductsServicesMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductsServices)(nil).UpdateProduct), arg0, arg1)
}
